(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{299:function(t,s,_){"use strict";_.r(s);var v=_(14),a=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-什么是版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是版本控制系统"}},[t._v("#")]),t._v(" 1. 什么是版本控制系统")]),t._v(" "),s("p",[t._v("版本控制系统（"),s("code",[t._v("VCS")]),t._v("）：记录 "),s("strong",[t._v("文件内容")]),t._v(" 的修改，将来可以对任意版本操作的系统。"),s("br"),t._v("\n包含两大类：")]),t._v(" "),s("ul",[s("li",[t._v("集中式版本控制系统")]),t._v(" "),s("li",[t._v("分布式版本控制系统")])]),t._v(" "),s("h3",{attrs:{id:"_1-1-集中式版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-集中式版本控制系统"}},[t._v("#")]),t._v(" 1.1. 集中式版本控制系统")]),t._v(" "),s("p",[t._v("所谓“集中式”，将所有的管理都及记录都置于一台（多台）中央服务器，每个用户都需要依赖中央服务器进行操作和交互。\n"),s("img",{attrs:{src:"/asserts/git/centralized.png",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("图示中可以看到，每个用户的本地，其实仅仅存储了各自当时拉取的那个版本的文件快照（并不包含整个项目的所有历史变更记录），整个项目的所有变更记录全部存储与中央服务器。")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("缺点")]),t._v(" "),s("p",[t._v("正因为这种集中式的管理方式，导致一个严重的问题，一旦中央服务器发生故障，那么所有用户将无法操作（提交、拉取、推送......），更有甚者，如果中央服务器磁盘发生故障，导致了不可恢复的情况，那么整个项目可能会丢失（此时虽然每个用户本地有一份，可以通过它来恢复，但是不一定是最新的，而且变更记录也没了）。")])]),t._v(" "),s("h3",{attrs:{id:"_1-2-分布式版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-分布式版本控制系统"}},[t._v("#")]),t._v(" 1.2. 分布式版本控制系统")]),t._v(" "),s("p",[t._v("所谓“分布式”，每一个客户端都保存着整个项目的所有记录。"),s("br"),t._v(" "),s("img",{attrs:{src:"/asserts/git/distributed.png",alt:""}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("每个客户端保存了整个项目的所有细节，那么其他任意客户端如果发生故障，则都可以通过其中过一个客户端恢复。"),s("br"),t._v("\n每个客户端的本地，就是一个版本管理系统，那么可以在本地就对修改进行提交，而其他客户端只需要拉取这些提交即可更新到他们的本地，或者推送到其他客户端；同理，可以通过任意一个客户端将整个项目拉取到本地。"),s("br"),t._v("\n各个客户端之间的交互很受环境影响且不方便，因此还是做了一台中央服务器当作一个客户端，只不过它是通过网络的方式，让各个客户端在这里进行交换修改和任意操作。")])]),t._v(" "),s("p",[t._v("综述：集中式版本控制系统，将所有的变更记录都存放于中央服务器；分布式版本控制系统，每个客户端就是一个完整的版本控制系统。")]),t._v(" "),s("h2",{attrs:{id:"_2-认识-git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-认识-git"}},[t._v("#")]),t._v(" 2. 认识 "),s("code",[t._v("Git")])]),t._v(" "),s("p",[s("code",[t._v("Git")]),t._v("，是一个“分布式版本控制系统”。同属于分布式版本控制系统，其设计思想也有可能与其他版本控制系统是不同的。")]),t._v(" "),s("h3",{attrs:{id:"_2-1-直接存储快照"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-直接存储快照"}},[t._v("#")]),t._v(" 2.1 直接存储快照")]),t._v(" "),s("p",[t._v("大多数的版本控制系统（集中式，分布式）对待数据的方式，都是存储“修改信息”；而 "),s("code",[t._v("Git")]),t._v(" 则不是，它是将每一次修改后提交后的整个项目做了快照存储（当然细节肯定不是真的所有文件都存储，这里暂不讨论）。通过以下图示区分理解："),s("br"),t._v("\n基于差异化的版本管理系统如下：\n"),s("img",{attrs:{src:"/asserts/git/deltas.png",alt:"基于差异化的版本管理系统"}}),s("br"),t._v("\n基于快照的版本管理系统如下：\n"),s("img",{attrs:{src:"/asserts/git/snapshots.png",alt:"基于快照的版本管理"}})]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),s("p",[t._v("图示中，明显的看到，基于差异化的版本控制系统，每个本版存储的是具有修改的文件的修改内容；而基于快照的版本控制系统，每个版本几乎都存储了整个项目的快照。")])]),t._v(" "),s("h3",{attrs:{id:"_2-2-三种状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-三种状态"}},[t._v("#")]),t._v(" 2.2 三种状态")]),t._v(" "),s("p",[s("code",[t._v("Git")]),t._v(" 在运行的过程中，对文件内容进行了三种状态的描述：")]),t._v(" "),s("ul",[s("li",[t._v("已修改（"),s("code",[t._v("modified")]),t._v("）：对文件内容做了修改（新增、删除、修改），但是还没有保存到数据库（"),s("code",[t._v("git")]),t._v("内置的本地数据库）中")]),t._v(" "),s("li",[t._v("已暂存（"),s("code",[t._v("staged")]),t._v("）：对文件内容做了修改（新增、删除、修改），并且对它们做了标记，使之包含在接下来提交的快照中")]),t._v(" "),s("li",[t._v("已提交（"),s("code",[t._v("committed")]),t._v("）：显然，就是对已标记的的快照存入了数据库中")])])])}),[],!1,null,null,null);s.default=a.exports}}]);