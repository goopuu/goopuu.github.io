(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{319:function(v,a,t){"use strict";t.r(a);var _=t(14),s=Object(_.a)({},(function(){var v=this,a=v._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"什么是-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-javascript"}},[v._v("#")]),v._v(" 什么是 JavaScript？")]),v._v(" "),a("p",[v._v("JavaScript：是一门跨平台、面向对象的编程语言。")]),v._v(" "),a("p",[v._v("单纯的说 ”编程语言“，其实是没有意义的，需要一种能够将这门编程语言解释、编译成低级语言，最终被操作系统执行才具有意义。\n比如：")]),v._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[v._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[v._v("'Hello World'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),v._v("\n")])])]),a("p",[v._v("在没有涉及到解释器、编译器之前，我可以把它叫做 ”PHP源代码“，也可以叫做 ”JavaScript源代码“，还可以叫做 ”Java源代码“ 等等。")]),v._v(" "),a("p",[v._v("编程语言，构建在解释器、编译器之上，能够被它们正确解析形成的一套规则，通过这些规则书写的文档，就被称作相应的”源代码“。\n因此，上述示例中的源代码，拿到 ”PHP解释器“中执行，解释不了，拿到 ”Java编译器“ 中，编译不了，而置于 ”"),a("a",{attrs:{href:"#JavaScript%E5%BC%95%E6%93%8E"}},[v._v("JavaScript引擎")]),v._v("“ 中则能够正常被解释，因此在这个基础上，称之为 ”JavaScript源代码“ 才合理。")]),v._v(" "),a("h2",{attrs:{id:"javascript引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript引擎"}},[v._v("#")]),v._v(" JavaScript引擎")]),v._v(" "),a("p",[v._v("JavaScript引擎：JavaScript源代码 的解释器，能够将JavaScript源代码解析成低级语言的软件。")]),v._v(" "),a("p",[v._v("JavaScript引擎也不是随便的构建一些解析规则，而是根据一定的规范："),a("a",{attrs:{href:"#ECMAScript"}},[v._v("ECMAScript")]),v._v("，而实现的一个软件。")]),v._v(" "),a("h2",{attrs:{id:"ecmascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ecmascript"}},[v._v("#")]),v._v(" ECMAScript")]),v._v(" "),a("p",[v._v("ECMAScript：它定义了”标准脚本语言“应该实现的规范。")]),v._v(" "),a("p",[v._v("可以由任意开放语言编写软件来实现这套规范，当实现了这套规范之后，就可以在这套软件的基础上构建出一种编程语言来方便开发，这门语言就是标准的脚本语言。而实现这套规范的软件统称叫做"),a("code",[v._v("JavaScript引擎")]),v._v("，并且在引擎的基础上构建了 "),a("code",[v._v("JavaScript编程语言")]),v._v("。")]),v._v(" "),a("p",[a("strong",[v._v("所以，严谨的说，JavaScript引擎，实现了 ECMAScript规范，而在 JavaScript引擎的基础上构建了 JavaScript编程语言。")])]),v._v(" "),a("p",[v._v("其中，JavaScript引擎既然可以由任意开放语言实现，那么就可能存在差异，其中比较重要的：")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("V8")]),v._v("，Chrome，Opera，和 Node，都使用了该引擎")]),v._v(" "),a("li",[a("code",[v._v("SpiderMonky")]),v._v("，FireFox 使用了该引擎")])]),v._v(" "),a("p",[a("strong",[v._v("了解 ECMAScript 中的规范：")])]),v._v(" "),a("ul",[a("li",[v._v("语法（解析规则、关键字、流程控制、对象初始化，等等）")]),v._v(" "),a("li",[v._v("错误处理机制")]),v._v(" "),a("li",[v._v("数据类型")]),v._v(" "),a("li",[v._v("基于原型的集成机制")]),v._v(" "),a("li",[v._v("内置对象和函数")]),v._v(" "),a("li",[v._v("严格模式")]),v._v(" "),a("li",[v._v("模块系统")]),v._v(" "),a("li",[v._v("基本内存模型")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),a("p",[v._v("这里可以看到，ECMAScript 仅仅规范了极其简单基础的规则，而要实现其他很多功能是完全不够的，因此，引擎一般都会通过创建新的对象的方式，扩展其他功能，因此形成了”"),a("a",{attrs:{href:"#%E5%AE%BF%E4%B8%BB%E7%8E%AF%E5%A2%83"}},[v._v("宿主环境")]),v._v("“。")])]),v._v(" "),a("h2",{attrs:{id:"宿主环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宿主环境"}},[v._v("#")]),v._v(" 宿主环境")]),v._v(" "),a("p",[v._v("所谓”宿主环境“，它是一套集成了JavaScript引擎，还提供了”针对计算机通用功能解决方案“的系统。")]),v._v(" "),a("p",[v._v("比如客户端JavaScript，浏览器就作为宿主环境，浏览器集成了引擎，并且提供了操作浏览器的一系列方案（浏览器是计算机中很常见的软件，因此这个操作浏览器的功能就很通用了）。")]),v._v(" "),a("p",[v._v("比如服务器端JavaScript，Node作为宿主环境，同样集成了引擎，并且提供了处理比如网络、文件系统、数据库处理等等的操作（在作为服务器端编程的时候，这些也是通用功能）。")]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),a("p",[v._v("类似 jQuery，Vue等，这些虽然也提供了一系列强大的功能，但是它们不是必须的，我可以用自己写的类库，其他的框架等等，这些操作都不是计算机通用功能的解决方案，并且也没有自身集成引擎。")])]),v._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[v._v("提示")]),v._v(" "),a("p",[v._v("当然，关于”宿主环境“，其实没必要严格的去定义它，只需要知道目前作为客户端的浏览器是一个宿主环境，作为服务器端的Node也是一个宿主环境即可。")])]),v._v(" "),a("h2",{attrs:{id:"es"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es"}},[v._v("#")]),v._v(" ES")]),v._v(" "),a("p",[a("code",[v._v("ECMAScript")]),v._v(" 简称："),a("code",[v._v("ES")]),v._v("。")]),v._v(" "),a("p",[v._v("通常说的 "),a("code",[v._v("ES5")]),v._v(" 指 2009 年发布的规范，"),a("code",[v._v("ES6")]),v._v(" 指 2015年发布的规范。")]),v._v(" "),a("p",[v._v("但是从 "),a("code",[v._v("ES6")]),v._v(" 开始，及其后续的版本都不在使用版本号了，而是使用年份，比如 "),a("code",[v._v("ES2015")]),v._v("（"),a("code",[v._v("ES6")]),v._v("），"),a("code",[v._v("ES2017")]),v._v("，"),a("code",[v._v("ES2023")]),v._v("等等。")])])}),[],!1,null,null,null);a.default=s.exports}}]);