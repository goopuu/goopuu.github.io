(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{338:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("提示")]),s._v(" "),t("p",[s._v("本章不是学习完整 "),t("code",[s._v("Composer")]),s._v(" 的章节，仅仅学习使用 "),t("code",[s._v("Composer")]),s._v(" 安装依赖，以及实现自动加载。")])]),s._v(" "),t("p",[t("strong",[s._v("安装依赖：")]),t("br"),s._v("\n在目录下手动创建 "),t("code",[s._v("composer.json")]),s._v(" 文件，然后在里面声明依赖，最终执行安装。"),t("br"),s._v("\n或者直接通过命令行安装依赖，会自动生成 "),t("code",[s._v("composer.json")]),s._v("文件。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 手动创建 composer.json")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"require"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xxx/xxx"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.*"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 然后执行命令安装依赖")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n")])])]),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 直接通过命令安装")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" xxx/xxx "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".*\n")])])]),t("p",[s._v("如上操作，会安装指定的依赖：")]),s._v(" "),t("ul",[t("li",[s._v("如果存在 "),t("code",[s._v("composer.lock")]),s._v("，其实安装操作是根据这个文件安装的")]),s._v(" "),t("li",[s._v("如果不存在 "),t("code",[s._v("composer.lock")]),s._v("，才会根据 "),t("code",[s._v("composer.json")]),s._v(" 中的声明安装依赖，并且最终会生成一个 "),t("code",[s._v("composer.lock")])])]),s._v(" "),t("p",[t("strong",[s._v("更新依赖：")]),t("br"),s._v("\n此时一定是根据 "),t("code",[s._v("composer.json")]),s._v(" 文件来更新的了，比如上述的依赖包当时安装的版本为 "),t("code",[s._v("1.1")]),s._v("，现在这个包已经被作者更新到了 "),t("code",[s._v("1.2")]),s._v("，甚至 "),t("code",[s._v("2.2")]),s._v("，如此如果更新依赖的话，会根据声明 "),t("code",[s._v("1.*")]),s._v(" 更新为 "),t("code",[s._v("1版本中最新的那个版本，即1.2")]),s._v("，而不会更新到 "),t("code",[s._v("2.2")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 全部更新")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定更新具体包")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update xxx/xxx\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定更新具体包为新的版本")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("composer")]),s._v(" update xxx/xxx "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".*      // 这个时候就会更新到 "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.2")]),s._v(" 了\n")])])]),t("p",[t("strong",[s._v("版本管理：")]),t("br"),s._v("\n原则上说，"),t("code",[s._v("composer.json")]),s._v(" 和 "),t("code",[s._v("composer.lock")]),s._v(" 都应该提交到版本控制系统中，如此各个开发的依赖包的版本才会一致。")]),s._v(" "),t("p",[t("strong",[s._v("自动加载：")]),t("br"),s._v("\n默认安装的依赖，会在安装目录下生成一个 "),t("code",[s._v("vendor")]),s._v(" 的目录，所有安装的依赖都在里面。"),t("br"),s._v("\n只需要引入 "),t("code",[s._v("vendor/autoload.php")]),s._v("，就能够使用 "),t("code",[s._v("Composer")]),s._v(" 的自动加载功能，并且安装的所有依赖都已经实现了自动加载。")]),s._v(" "),t("div",{staticClass:"language-php extra-class"},[t("pre",{pre:!0,attrs:{class:"language-php"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 入口文件")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("require_once")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[s._v("'vendor/autoload.php'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时就可以实现自动加载安装的依赖了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token package"}},[s._v("xxx")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("xxx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$xxx")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("xxx")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),t("p",[s._v("还有一种，实现自己编写的类库的自动加载，比如控制器、模型、类库等等，只需要在 "),t("code",[s._v("composer.json")]),s._v(" 中声明："),t("code",[s._v('"autoload": {“psr-4": {命名空间: 目录路径}}')])]),s._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"autoload"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"psr-4"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"App'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"app/"')]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Database'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database/factory/"')]),s._v(",\n            "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Lib'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\\\"}},[s._v("\\\\")]),s._v('"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"shared/library/"')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),t("p",[s._v("注意，目录路径的相对路径，是相对于 "),t("code",[s._v("composer.json")]),s._v(" 所在目录来说的。"),t("br"),s._v("\n注意，编写了、修改了 "),t("code",[s._v("autoload")]),s._v("，需要重新执行 "),t("code",[s._v("composer install")]),s._v(" 生成新的 "),t("code",[s._v("autoload.php")]),s._v("才能实现更新自动加载。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);